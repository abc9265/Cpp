/*
	pointerAndFiexedArray
	동적배열과 동적할당을 배울때 중요한 기본이 된다.
	결론부터 말하자면 둘은 같음.
*/


#include <iostream>

using namespace std;

struct MyStruct
{
	int array[5] = { 9, 7, 5, 3, 1};
};

// void printArray(int array[])
void printArray(int *array)
{
	cout << sizeof(array) << endl; // 8
	cout << *array << endl;
	
	*array = 100;
}

int main()
{
	
	int array[5] = {9, 7, 5, 3, 1};
	
	// 주소가 나옴
	// 배열의 맨 첫번째 주소와 array의 주소가 같음.
	// array는 배열이 아닌 포인터임.
	cout << array << endl;
	cout << &(array[0]) << endl;
	
	cout << *array << endl;	
	
	// 문자형 포인터라 문자를 가져와서 출력해줌.
	char name[] = "JackJack";
	cout << *name << endl;
	
	// ptr자체의 주소를 찍어보면 또 다름
	int *ptr = array; // 포인터를 의미하는 *
	cout << ptr << endl;
	cout << *ptr << endl; // de-referencing을 의미하는 * 위의 *과 의미가 다르다.
	cout << &ptr << endl;
	
	// 편의성 기능이 정적 어레이에 좀 들어가있음.
	// 나중에는 거의 동적할당된 포인터를 사용함.
	
	// 서로 다름. 위의것은 20이 아래것은 4가 나옴
	// 포인터 변수 자체의 크기가 8바이트
	cout << sizeof(array) << endl;
	cout << sizeof(ptr) << endl;
	
	// 파라미터가 들어오는순간 어레이처럼 보이지만 내부적으로는 포인터임.
	printArray(array);
	
	// 값이 바뀜 
	// 함수 밖에서도 값이 바뀌어있다.
	// C에서는 이런 용도로 자주 썼었음.
	// C++에서는 이런 용도로는 레퍼런스를 더 많이씀.
	cout << *array << endl; 
	
	// ptr다음값을 가져올 수 있다.
	cout << *ptr << " " << *(ptr + 1) << endl;

	
	// 구조체안에 array를 넣고 구조체를 보내보림
	// array가 스트럭쳐나 클래스안에 들어있을 경우는 
	// 포인터로 강제변환되지않고 array로 바로 간다.
	MyStruct ms;
	cout << ms.array[0] << endl;
	cout << sizeof(ms.array) << endl;
	
	return 0;
}
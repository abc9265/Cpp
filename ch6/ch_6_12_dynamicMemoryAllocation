/*
	Dynamic Memory Allocation
*/

// 메모리 할당되는경우
// 1. static memory allocation, 전역변수, static변수 끝까지 메모리를 가지고이씅ㅁ
// 2. 자동 메모리 할당, 변수 선언시 블럭밖으로 나가면 사라지고 OS에 반납
// 3. 동적 메모리 할당, 포인터 관련


#include <iostream>

int main()
{
	using namespace std;
	
	// 메모리를 할당할 수 없음
	// 프로그램에서 정적으로 할당하는 메모리는 stack에 들어가는데 용량이 작기때문
	// Heap에는 동적으로 할당되는 메모리들이 들어가는데 용량이 큼
	// int array[1000000];
	
	// int var;
	// integer사이즈에 맞춰서 os에게 받아온 후 주소를 우리에게 알려줌
	// 따라서 포인터로 받아야한다
	// 굳이 이렇게 하는이유? 배열의 크기문제등의 장점이 많기때문
	int *ptr = new int; 
	int *ptr2 = new int(8); // 이런식으로 초기화 할 수도 있다.
	*ptr = 7; // var = 7과 같다.
	
	delete ptr;
	
	// 이런식으로 아무의미가 없다고 기록해두면 나중에 실수하지 않을 수 있다.
	ptr = nullptr;  
	
	// 알고있던 주소로갔더니 전혀 다른값이더라
	// 스마트포인터를 사용하면 자동으로 처리하게됨
	// 그럼에도 알아야하는 이유는 장기적으로 고급프로그래밍시 결국 배워야함
	cout << "After delete" << endl;
	
	if ( ptr != nullptr)
	{
		cout << ptr << endl;
		cout << *ptr << endl;
	}
	cout << *ptr2 << endl; 
	
	// 가져왔으면 다시 OS에게 돌려줘야함 
	// 방금전에 처음 시작했을때 아무 문제도 발생하지 않았는데
	// 이 프로그램에게 어디있는걸 얼만큼 줬었다고 os가 기억하고 있었기때문이다. 
	// OS가 자동으로 걷어가기 떄문
	//delete ptr;
	delete ptr2;
	
	
	// 메모리를 할당받지 못할 때가 있음. 다른 프로그램이 전부 쓰고있어서. 
	// 바로 죽어버리게 짜는 방법이 있고
	// 어떤경우에도 죽지않게하면서 메모리를 기다리는방법이있음
	// 에러가나면 nullptr이 들어간다고함
	/*
	int *ptr3 = new (std::nothrow) int {7};
	
	if (ptr3)
	{
		cout << ptr3 << endl;
		cout << *ptr << endl;
	}
	else
	{
		cout << "Could not alloacate memory" << endl;
	}
	*/
	
	int *ptr5 = new (std::nothrow) int{7};
	int *ptr6 = ptr5;
	
	delete ptr;
	ptr5 = nullptr;
	ptr6 = nullptr;
	
	// 메모리 누수 memory leak 무시무시한 에러
	// 어딘가 가져다 놓는데 어디에 있는지 알 수가 없음.
	// ptr이 new를 한 다음에 포인터변수가 사라짐 
	// ????? 
	// 메모리가 쭈우욱 올라가기만하면 메모리누수가 일어나고있는 상황임
	while (true)
	{
		static int i = 0;
		if(i > 5) break;
		
		int *ptr = new int;
		cout << ptr << endl;
		i++;
		delete ptr; // 꼭 지워줘야한다.
	}
	
	// 참고로 new와 delete는 좀 느린편이다.
	// 그래서 프로그래밍을 잘하려면 new와 delete를 적게사용하는 방식으로 하는게 좋다.
	
	return 0;
}
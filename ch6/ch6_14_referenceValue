/*
	reference Variables
*/


#include <iostream>
struct Somthing 
{
	int v1;
	float v2;
};

struct Other
{
	Somthing st;
};

void doSomething(int &n) // reference를 가져온다.
{
	std::cout << &n << std::endl;
	std::cout << "In doSomething " << n << std::endl;
}

int main()
{
	using namespace std;
	
	int value = 5;
	
	int *ptr = nullptr;
	ptr = &value;
	
	// 참조 
	int &ref = value; // ref가 value처럼 작동한다. 같은 메모리를 사용하는거처럼 작동
	
	cout << ref << endl;
	ref = 10;
	
	cout << value << " " << ref << endl;
	
	
	// value의 주소와 ref의 주소가 같은 값이 나온다. value의 값을 공유한다.
	cout << &value << endl;
	cout << &ref << endl;
	cout << ptr << endl;
	cout << &ptr << endl; // 포인터 변수 자체에 담겨있는 주소는 다르다.
	
	/*
		참조는 별명처럼 사용할 수 있다. 
		ref는 반드시 초기화되어야한다, 오른쪽에 리터럴은 들어갈 수 없다.
	*/
	int &ref2 = value;
	
	int &ref3 = value;
	
	const int y = 8;
	const int &ref4 = y; // const를 그냥 레퍼런스에 넣을 수는 없다. const에 넣어야함.
	
	// reference가 reassigned 되는가? 
	int value1 = 5;
	int value2 = 10;
	
	int &ref1 = value1;
	
	cout << ref1 << endl;
	
	ref1 = value2;
	
	cout << ref2 << endl;
	
	
	// 포인터는 변수의 주소를 복사해서 넘겨주는것임 
	// reference를 쓰게되면 변수를 아예 넘겨버림 
	// 퍼포먼스 측면에서 복사하는 과정이 없으므로 유리함
	int n = 5;
	cout << &n << endl;
	cout << n << endl;
	
	// doSomething이 n의 값을 바꾸지 못하게 하고싶다?
	// 파라미터를 const로 막아버리면됨
	doSomething(n);
	cout << n << endl;
	
	Other ot; 
	// other안에 있는 st에 접근한다.
	ot.st.v1 = 1.0; // 이렇게쓰면 되는데 이러면 너무 길고 느려짐 
	
	// 레퍼런스를 쓰면 편하다.
	int &v1 = ot.st.v1; 
	v1 = 1;
	
	int value3 = 5;
	int *const ptr2 = &value;
	int &ref5 = value3;
	
	// ref도 내부적으로는 포인터로 구현되어있음.
	
	return 0;
}
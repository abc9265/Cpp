/*
	산술연산자 오버로딩하기
*/

#include <iostream>

using namespace std;

class Cents
{
	private:
	int m_cents;
	
	public:
	Cents(int cents = 0){m_cents = cents;}
	int getCents() const { return m_cents; }
	int& getCents() { return m_cents; }
	
	// 멤버로만 해야하는 연산자들도 있다.
	// assignment(=), [], (), -> 얘네들은 이런형태로만 오버로딩이 가능하다.
	Cents operator + (const Cents &c2)
	{
		return Cents(this->m_cents + c2.getCents());
	}
};

void add(const Cents &c1, const Cents &c2, Cents &c_out)
{
	c_out.getCents() = c1.getCents() + c1.getCents();
}


int main()
{
	Cents cents1(6);
	Cents cents2(8);
	
	Cents sum;
	add(cents1, cents2, sum);
	
	cout << sum.getCents() << endl;
	
	cout << "---------------------------" << endl;
	
	// 산술연산자로 간결하게 할 수는 없을까?
	// 함수에 operator +를 쓰면 +를 이용해서 할 수 있다.
	cout << (cents1 + cents2 + Cents(6) + Cents(10)).getCents() << endl;
	
	
	// 오버로딩 안되는 연산자들
	// ?:
	// sizeof
	// ::
	// . 
	// .*
	
	// 연산자 우선순위는 그대로니까 오버로딩할 때 주의하자
	// 수학적으로 직관적으로 알 수 있는 경우에만 연산자 오버로딩을 하자
	// 위험한거보단 불편한게 낫다.
	// ^ - 연산자 우선순위가 매우 낮기때문에 괄호로 싸서 사용해야하니 오버로딩을 안하는게 속편하다
	
	
	return 0;
}
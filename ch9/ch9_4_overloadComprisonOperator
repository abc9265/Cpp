/*
	비교연산자 오버로딩
*/

#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

class Cents
{
	private:
	int m_cents;
	
	public:
	Cents(int cents = 0) { m_cents = cents; }
	int getCents() const { return m_cents; }
	int& getCents() { return m_cents; }
	
	friend std::ostream& operator << (std::ostream &out, const Cents &cents)
	{
		out << cents.m_cents;
		return out;
	}
	
	friend bool operator == (const Cents& c1, const Cents& c2)
	{
		return c1.m_cents == c2.m_cents;
	}
	
	// sort를 쓸때는 왼쪽이 더 작냐(less than)하는 연산자를 오버로딩해야함
	friend bool operator < (const Cents& c1, const Cents& c2)
	{
		return c1.m_cents < c2.m_cents;
	}
};

int main()
{
	Cents cents1(0);
	Cents cents2(0);
	
	
	// 오버로딩을 안하면 이건 안됌 
	if(cents1 == cents2)
		cout << "Equa1" << endl;
	
	cout << std::boolalpha;
	cout << "-------------------------" << endl ;
	
	
	// Sorting
	// 크기비교하는 연산자를 오버로딩해줘야 쓸 수있다.
	vector<Cents> arr(20);
	for (unsigned i = 0; i < 20; ++i)
		arr[i].getCents() = i;
	
	std::random_shuffle(begin(arr), end(arr));
	
	for (auto &e : arr)
		cout << e << " ";
	cout << endl;
	
	std::sort(begin(arr), end(arr));
	
	for (auto &e : arr)
		cout << e << " ";
	cout << endl;
	
	return 0;
}
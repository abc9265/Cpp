/*
	auto And decltype
	auto는 추론할때 const등을 다 떼버린다.
	따라서 auto를 쓸떄 const등을 쓰고싶다면 따로 지정해줘야한다.
	const &auto와 같이말이다.
	volatile int vs = ... 
	volatile은 값이 자주 변하기 떄문에 최적화할 때 빼달라라는 의미다.
	멀티 쓰레딩을 사용할 때 사용할 수 있다.
	template type도 동일한 방식으로 이루어진다.
	const int c = 0;
	auto & rc = c;
	// rc = 123; // error?
	왜 auto & rc 는 const로 선언됨? 
	rc가 레퍼런스니 rc가 레퍼런스가 아니면 가져올 수 없으므로 const로 변환한다.
	대입되는 존재에 따라서 레퍼런스가 변환되기도한다.
	int i = 42;
	auto && ri_1 = i; // l-value
	auto && ri_2 = 42; // r-value
	
	template 타입이 두개가 있을때 
	다른 두개의 타입을 곱하기를 할때 어떤 타입이 될지 알 수 없음. 
	이럴 때 auto를 이용하면 굉장히 좋음.
	c++ 11전에는 이걸 해소하기 위해서 일부 컴파일러에서는 typeof를 사용했음
	// typeof(lhs*rhs) 
	typedef decltype(lhs*rhs) product_type;
	typedef decltype -> == typeof 이전에 관습적으로 사용하던걸 공식적으로 가져옴
	
	decltype은 auto와 달리 선언한대로 타입을 가져온다.
	typedef decltype((x)) x_with_parens_type; // <- 레퍼런스 타입으로 선언한다.
	vector 에서 operator bracket함수는 레퍼런스를 리턴한다. 따라서 decltype 사용시 레퍼런스로 이용하게됨
	auto fpmin_wrong(T x, S y) -> decltype(x < y ? x : y)
	나중에 다시보기
	typename std::remove_reference<decltype(x < y ? x : y)>::type --- 레퍼런스가 제거된 타입을 사용한다.
*/

#include <iostream>

using namespace std;

int main()
{
	
	
	
	return 0;
}
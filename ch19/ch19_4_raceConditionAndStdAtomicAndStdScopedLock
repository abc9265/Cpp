/*
	Race Condition, std::atomic, std::scoped_lock
	멀티스레딩은 같은 메모리 공간을 사용하기 때문에 오류가 발생할 수도 있다.
	이러한 경우를 레이스 컨디션이라고 부름.
*/

#include <iostream>
#include <thread>
#include <atomic> // atom - 쪼갤 수 없다. 3단계를 한방에 해치우도록 묶어버린 변수라고 생각하면 됨.
#include <mutex>
#include <chrono>

using namespace std;

mutex mtx;

// int shared_memory(0); // 여러개의 쓰레드들이 이 변수에 동시에 접근함

int main()
{
	int shared_memory(0);
	
	auto count_func = [&]() {
		for (int i = 0; i < 1000; ++i)
		{
			// 멀티스레딩은 너무 빨라서 오류를 잡아내기 힘든데 그 때 크로노를 사용하면 좋다.
			// sleep_for를 뺐다고 오류가 사라지는게 아님.
			// 너무 빨리 처리되서 병렬처리가 되지 않은것.
			this_thread::sleep_for(chrono::milliseconds(1)); 
			
			// 동시에 하나의 쓰레드만 접근이 가능해진다. atomic을 쓴것과 비슷한 효과를 낼 수 있음.
			// mtx.lock(); 
			
			
			// std::lock_guard lock<std::mutex>(mtx); // 권장됨.
			
			// c++ 17 - scoped_lock이 있음.
			// 범위를 벗어나는 순간 풀림.
			std::scoped_lock lock(mtx);
			
			
			// atomic안에 정의가 따로되어있다.
			// atomic의 단점은 증가연산자, 감소연산자의 퍼포먼스가 조금씩은 느려진다.
			shared_memory++;
			
			// shared_memoy.fetch_add(1); // 이것을 사용해도 된다.
			
			// 프로그래머가 unlock을 하는것을 잊어먹거나 예외처리를할때 건너뛸 수 도 있다.
			// 이럴때 사용하는게 락가드.
			// mtx.unlock();
		}
	};
	
	thread t1 = thread(count_func);
	thread t2 = thread(count_func);
	
	t1.join();
	t2.join();
	
	cout << "After" << endl;
	
	
	// 결과가 2000이 나와야하는데 이상한 수가 나옴.
	// 이러한 점이 병렬처리를할때 까다롭고 어려운점임.
	// 둘 다 일을 더하는건 아님. 
	// 값을 cpu로 가져옴 - 1을 더한다음 - shared_memory에 더해진값을 저장함 -> 이러한 3단계로 연산이 이루어짐
	// cpu로 읽어들인 사이에 thread2가 값을 바꿔버린것 그래서 값이 정확하게 나오지 않음.
	// 따라서 atomic을 쓰자.
	cout << shared_memory << endl;
	
	
	return 0;
}
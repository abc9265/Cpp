/*
	std thread와 멀티쓰레딩 기초
	프로세스 - OS가 작성한 프로그램을 실행시킬때 관리를 하는 단위
	
	하나의 프로세스가 여러개의 쓰레드를 관리할 수 있다.
	멀티 프로세싱 - 하나의 프로그램을 만들고 그 프로그램이 여러개의 쓰레드를 만들어서
	여러개의 코어를 동시에 활용해서 효율성을 높이는 방법
	
	멀티쓰레딩은 하나의 시피유에 여러개의 코어가 들어가있는 경우 그 코어들을 활용해서
	동시에 여러가지의 작업을 수행하는 것을 의미한다.
	
	여러개의 씨피유를 꽂음 - 메모리의 속도떄문에 한계가 있어서 속도 향상이 그렇게 많지는 않았음
	
	멀티 쓰레딩은 멀티 프로세싱보다 효율이 좋음
	
	멀티 프로세싱을 이용해 효율성 증가 - 네트워크를 이용해 컴퓨터를 묶고 그 컴퓨터의 프로세서를 활용 - (분산처리)
	PC가 전부 흩어져있기때문에 메모리같은것을 공유할 수가 없다. 통신을 할때에 여러가지 부가적인 오버헤드가 생기기도 함.
	
	반면 멀티 쓰레딩은 여러개의 쓰레드들이 메모리를 공유한다. 따라서 프로그래머를 편하게 해주는 동시에 아주 위험하게
	만들기도 한다.
	
	주의) 프로그래밍을 어떻게 하던지간에 멀티코어 CPU에서 자동으로 멀티코어 프로세싱으로 효울을 높여주는게 아닌 
	멀티 쓰레딩을 하도록 프로그래밍을 해줘야한다.
	
	Main function(Main Thread 주된 쓰레드) --/무거운작업/--> 멀티 쓰레딩으로 프로그래밍, 메인 쓰레드가 다른 쓰레드 실행.
	메인 쓰레드가 쓰레드들을 순차적으로 실행을 시킨다.
	
	어떤 경우에는 메인 쓰레드가 생성한 자식 쓰레드에서 또 다른 자식 쓰레드를 만들어낼 수도 있다.
	
	
	쓰레드가 언제 끝나는지는 메인쓰레드는 알 수가 없다.
	그럼에도 불구하고 메인쓰레드에게 돌아오는 시점을 마치 쓰레드 생성 순서처럼 그려져있는데 메인 쓰레드가 쓰레드들이 
	일을 마치고 돌아오는것을 기다리고 있기 때문.
*/

#include <iostream>
#include <string>
#include <thread>
#include <chrono>
#include <vector>
#include <mutex>

using namespace std;

// 배워온 방식으로 프로그래밍하는것은 한 줄기만 쭉 따라가는 것이다.
int main()
{
	/*
	const int num_pro = std::thread::hardware_concurrency(); 
	// cout << std::thread::hardware_concurrency() << endl; // unsigned int 출력, 현재 코어개수 확인
	cout << std::this_thread::get_id() << endl; // 메인 함수가 실행되고 있는 thread, this thread의 아이디
	
	
	vector<std::thread> my_threads;
	my_threads.resize(num_pro);
	
	for(auto & e : my_threads)
		e = std::thread([]() {
					cout << std::this_thread::get_id() << endl;
					while (true)
					{}});
	
	for(auto & e : my_threads)
		e.join();
	*/

	// 에러코드가 남. 메인 함수가 어떤 쓰레드에서 작동을 하는데 그 쓰레드에서 다른 쓰레드를 하나 더 작동을 시킨다 
	// 새로 생긴 쓰레드는 원래 쓰레드와 관계없이 막 작동함
	// 원래의 쓰레드와 의사소통을 해야하는데 메인쓰레드가 끝나버려서 에러가 생긴것
	// 동시에 실행함(cuncurrency) 따라서 중구난방으로 실행됨 
	/*
	std::thread t1 = std::thread([]() {
		cout << std::this_thread::get_id() << endl;
		while (true)
		{}}); // 할일을 함수로 파라미터안에 넣어주면 됨
	
	
	std::thread t2 = std::thread([]() {
		cout << std::this_thread::get_id() << endl;
		while (true)
		{}}); 
	
	
	std::thread t3 = std::thread([]() {
		cout << std::this_thread::get_id() << endl;
		while (true)
		{}}); 
	
	
	std::thread t4 = std::thread([]() {
		cout << std::this_thread::get_id() << endl;
		while (true)
		{}}); 
	
	
	t1.join(); // 다시 합쳐진다. t1이 끝날때까지 기다린다.
	t2.join();
	t3.join();
	t4.join();
	*/
	
	
	mutex mtx; // mutual exclusion 상호 배제
	
	auto work_func = [](const string & name)
	{
		for(int i = 0; i < 5; ++i)
		{
			std::this_thread::sleep_for(std::chrono::milliseconds(100));
			
			
			// 한번에 하나의 쓰레드만 작동시켜. 
			mtx.lock(); // mutual exclusion 실행
			cout << name << " " << std::this_thread::get_id() << " is working " << i << endl; 
			mtx.unlock(); // unlock을 꼭 해줘야한다. 
		}
	};
	
	std::thread t1 = std::thread(work_func, "JackJack");
	std::thread t2 = std::thread(work_func, "Dash");
	
	t1.join();
	t2.join();
	
	// 멀티 쓰레딩을 하는 기본적인 이유는 - 동시성을 위해서. 동시에 일어나기때문에 cout이 중구난방으로 나오긴 한다.
	// 출력할때는 좀 정리가 되면 좋겠다. -> mutex 이용
	
	return 0;
}
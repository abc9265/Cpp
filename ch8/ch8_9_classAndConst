/*
	Class and Const	
*/

#include <iostream>
#include <string>

using namespace std;

class Something
{
	public:
	
	int m_value = 0;
	string m_string = 0;

	
	// default copy constructor가 숨어있다.
	// 파라미터내에서 호출됨
	Something(const Something& st_in)
	{
		m_value = st_in.m_value;
		cout << "Copy Constructor " << endl;
	}
	
	Something()
	{
		cout << "Constructor " << endl;
	}
	
	const string& getString() const 
	{	
		cout << "const version" << endl;
		return m_string;
	}
	string& getValue() 
	{
		cout << "non-const version" << endl;
		return m_string;
	}
	
	void setValue(int value) {m_value = value;}
	
	// member variable을 바꾸는 행위를 하지 않는다 
	// memberFunc가 const다
	int getValue() const {return m_value;} 
};

// 파라미터에 복사될 때 copy constructor가 사용된다.
void print(Something st)
{
	cout << st.m_value << endl;
	cout << &st << endl;
}


int main()
{
	Something something;
	/*
	// const로 클래스를 선언시 상수로 선언되어 set함수를 쓸 수 없다.
	// something.setValue(3); 
	
	// 컴파일러가 판단할때는 m_value가 바뀌었나 안바뀌었냐를 판단하는게 아닌 
	// member Function이 const냐 아니냐를 판단함
	// 클래스를 const로 선언하면 const member func만 사용할 수 있다.
	cout << something.getValue(); 
	
	// const로 넣을 수 있는 함수들은 전부 const로 넣는게 좋다.
	*/
	
	print(something);
	cout << &something << endl;
	
	cout << "----------------------------" << endl;
	// const냐 아니냐를 가지고도 오버로딩을 할 수있다.

	Something something2;
	const Something something3;
	
	return 0;
}
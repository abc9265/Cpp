/*
	Chaining Member Function	
*/

#include <iostream>

using namespace std;
class Simple
{
	private:
	int m_id;
	
	public:
	Simple(int id)
	{
		// 함수는 모든 인서턴스가 공유함
		// 그렇다면 내부적으로는 어떻게 구분하는가?
		// this->setID(id) // this->가 숨어있는것
		this->setID(id);
		this->m_id;
		// 파이썬의 self : 
		// 자기주소를 출력해줌
		cout << this << endl;
	}
	
	
	void setID(int id) { m_id = id; }
	int getID() { return m_id; }
	
};

// chiaing member Functions
class Calc
{
	private:
	int m_value;
	
	public:
	Calc(int init_value)
		: m_value(init_value)
	{}
	// 자기자신의 레퍼런스를 리턴해줌 
	Calc& add(int value) {m_value += value; return *this;}
	Calc& sub(int value) {m_value -= value; return *this;}
	Calc& mult(int value) {m_value *= value; return *this;}
	
	void print()
	{
		cout << m_value << endl;
	}
};



int main()
{
	// s1과 s2를 구분하는방법 -
	// 1. 주소를 찍어보자
	// 각 인스턴스들이 자기의 포인터를 가지고있고 그걸 보려면 this를 쓴다
	// 현재 주소를 가지고있는 인스턴스에서 setid를 사용한다는 의미에서
	// this->setid
	// 현재 이 주소를 가지고있는 인스턴스의 m_id를 접근한다는 의미에서
	// this->m_id
	
	Simple s1(1), s2(2);
	s1.setID(2);
	// Simple::setID(&s1, 1)가 어딘가에 저장되있고 이런식으로 작동된다.
	s2.setID(4);
	
	cout << &s1 << " " << &s2 << endl;
	cout << "------------------------------" << endl;
	
	// chaining member Function
	
	Calc cal(10);
	// 이러면 쓸게많아서  좀 번거롭다 
	// 자기자신의 레퍼런스를 리턴해줌 
	/*cal.add(10);
	cal.sub(1);
	cal.mult(2);
	*/
	
	// 자기자신을 리턴한거기때문에 이런식으로 쓰는게 가능해짐
	cal.add(10).sub(1).mult(2).print();
	/*
	// 이것과 같음
	// 실용성에 관해서는 명확하지 않음
	// 이렇게짜면 불안하다. 사용자입장에서 헷갈릴 수 있다
	// 하지만 이렇게 구현할 수도 있다.
	Calc &temp1 = cal.add(10);
	Calc &temp2 = temp1.sub(1);
	Calc &temp3 = temp2.mult(2);
	*/
	cal.print();
	
	
	return 0;
}
/*
	Function Pointers
	함수도 포인터임 
	함수도 메모리에 들어감
	함수도 주소만가지고 무언가 할 수 있다.
*/

#include <iostream>
#include <array>
#include <functional>

using namespace std;


bool isEven(const int& number)
{
	if(number % 2 == 0 ) return true;
	else return false;
}

bool isOdd(const int& number)
{
	if(number % 2 != 0) return true;
	else return false;
}

// 매개변수와 리턴타입을 맞춰줘야 함수포인터를 사용할 수 있다.
int func(int x)
{
	return 5;
}

int goo()
{
	return 10;
}

// 함수포인터자리에 isOdd 혹은 isEven이 들어갈 수 있다.
void printNumbers(const array<int, 10> &my_array, bool (*check_fcn)(const int&))
{
	for(auto element : my_array)
	{
		if(check_fcn(element) == true) cout << element << " " ;
		//if(!print_even && element % 2 == 1) cout << element << " ";
	}
	cout << endl;
}

int main()
{
	int(*fcnptr)(int) = func; 
	
	cout << fcnptr(1) << endl;
	
	// fcnptr = goo; 
	
	// cout << fcnptr() << endl;
	
	// 함수가 어느 메모리 주소에있는지 알아내고 그 주소에 있는 프로그램을 실행시키는것
	// func(); 
	
	std::array<int, 10> my_array{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
	
	// 함수 포인터 사용 
	// 함수는 이름자체가 func이기때문에 &를 붙여주지 않아도 된다.
	printNumbers(my_array, isEven);
	printNumbers(my_array, isOdd); 
	
	// 트릭
	typedef bool (*check_fcn_t)(const int&);
	// check_fcn check_fcn = isEven;
	using check_fcn_t = bool(*)(const int&);
	check_fcn_t check_fcn = isEven;
	
	// 더 편한것 (C++11)
	// #include <functional>
	// 뒤로가면 아주 유용하게 쓰일 수 있다.
	std::function<bool(const int&)> fcnptr2 = isEven;	
	
	return 0;
}
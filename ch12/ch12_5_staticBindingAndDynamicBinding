/*
 	Dynamic Binding And Static Binding 
	가상함수를 이용하는 다형성이 어떻게 되는지 이해하려면 이걸 이해해야함
*/

#include <iostream>

using namespace std;

int add(int x, int y)
{
	return x + y;
}

int subtract(int x, int y)
{
	return x - y;
}

int multiply(int x, int y)
{
	return x * y;
}

int main()
{
	int x, y;
	cin >> x >> y;
	
	int op;
	cout << "0 : add, 1 : subtract, 2 : multiply" << endl;
	cin >> op;
	
	// static binding(early binding)
	// 모든 변수명이 깔끔하게 빌트인에 정의되어있을때 static 바인딩이라고한다.
	int result;
	switch (op)
	{
		case 0: result = add(x, y); break;
		case 1: result = subtract(x, y); break;
		case 2: result = multiply(x, y); break;
	}
	
	cout << result << endl;
	
	// dynamic binding (late binding)
	// 주소에대한 바인딩이라고 생각하면됨
	// 컴파일타임에 결정되지않고 
	// 런타임시에 결정됨
	// func_ptr이 가리키는 주소가 add가될지 subtract가 될지, 
	// multiply가될지는 런타임시에 정의됨
	int(*func_ptr)(int, int) = nullptr;
	switch (op)
	{
		case 0: func_ptr = add; break;
		case 1: func_ptr = subtract; break;
		case 2: func_ptr = multiply; break;
	}
	
	cout << func_ptr(x, y) << endl;
	
	return 0;
}
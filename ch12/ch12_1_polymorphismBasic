/*
 	자식클래스의 객체에 부모클래스의 포인터를 사용한다면?
*/

#include <iostream>
#include <string>

using namespace std;

class Animal
{
	protected:
	std::string m_name;
	
	public:
	Animal(std::string name)
		:m_name(name)
	{}
	
	public:
	string getName() { return m_name; }
	
	virtual void speak() const
	{
		cout << m_name << " ??? " << endl;
	}
};


class Cat : public Animal
{
	public:
	Cat(string name)
	: Animal(name)
	{}
	
	void speak() const
	{
		cout << m_name << " Meow " << endl;
	}
};


class Dog : public Animal
{
	public:
	Dog(string name)
	:Animal(name)
	{}
	
	void speak() const
	{
		cout << m_name << " Woof " << endl;
	}
};


int main()
{
	Animal animal("my animal");
	Cat cat("my cat");
	Dog dog("my dog");
	
	animal.speak();
	cat.speak();
	dog.speak();
	
	Animal *ptr_animal1 = &cat; // 자식클래스를 부모클래스로 캐스팅하면 자기가 부모클래스인줄알고 사용됨
	Animal *ptr_animal2 = &dog;
	
	ptr_animal1->speak();
	ptr_animal2->speak();
	
	
	Cat cats[] = {Cat("cat1"), Cat("cat2"), Cat("cat3"), Cat("cat4"), Cat("cat5")};
	Dog dogs[] = {Dog("dog1"), Dog("dog2")};
	
	// 일일이 다 쳐줘야하는데 힘들고 귀찮음
	for(int i = 0; i < 5; ++i)
		cats[i].speak(); 
	
	cout << " ----------------------------------- " << endl;
	
	// 애니멀 클래스 포인터 하나로 묶어버리면 어떨까.
	// ???로 나오는걸 방지하기위에 앞에 virtual을 붙임
	Animal *my_animals[] = {&cats[0], &cats[1], &cats[2], &cats[3], &cats[4],
						    &dogs[0], &dogs[1]};
	
	for(auto & elements : my_animals)
		elements->speak();
	
	return 0;
}
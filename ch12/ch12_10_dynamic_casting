/*
 	동적 형변환
	Dynamic Casting
	자식클래스 -> 부모클래스 -> 다시 자식클래스
	이때 사용할 수 있는 동적 형변환
*/

#include <iostream>
#include <string>

using namespace std;


class Base
{
	public:
	int m_i = 0;
	
	Base(int i_in)
		: m_i(i_in)
	{}
	
	virtual void print()
	{
		cout << "I'm base" << endl;
	}
};

class Derived1 : public Base
{
	public:
	int m_j = 1;
	Derived1(int i_in = 0)
		: Base(i_in) 
		{}
		
	virtual void print() override
	{
		cout << "I'm Derived1" << endl;
	}
};


class Derived2 : public Base
{
	public:
	std::string m_name = "Dr.Two";
	
	Derived2(int i_in = 0)
		: Base(i_in) 
		{}
		
	virtual void print() override
	{
		cout << "I'm Derived2" << endl;
	}
		
};


int main()
{
	Derived1 d1;
	Base *base = &d1;
	// d1을 액세스할 수 없는경우 함수의 파라미터로 d1이 액세스되어 들어올경우
	// base에만 없고 d1에 있는것은 접근불가
	// d1.m_j; --> 접근불가
	// base->m_j
	
	
	// 동적 형변환
	// 가급적 안쓰는게 좋음
	// virtual function으로 왠만하면 해결하자
	auto *base_to_d1 = dynamic_cast<Derived1*>(base);
	cout << base_to_d1 -> m_j << endl;
	base_to_d1->m_j = 256;
	
	cout << d1.m_j << endl;
	
	// 주의해야 할 점 
	// dynamic cast는 캐스팅에 실패하면 nullptr을 넣어버린다.
	// 따라서 
	// if(base_to_d1 != nullptr)
	// 을 넣어주는게 좋다.
	
	// static_cast는 이게 되는데 
	// 이유는 런타임에서 에러체크를 안하고 최대한 되는걸로 미뤄붙임
	// 안되는거에서도 되는경우가 가끔 있음
	// 암튼 캐스팅은 왠만하면 쓰지말자
	auto *base_to_d2 = dynamic_cast<Derived2*>(base);
	cout << base_to_d2 -> m_name << endl;

	
	return 0;
}
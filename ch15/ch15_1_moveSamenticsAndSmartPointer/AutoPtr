#pragma once

#include <iostream>

// std::auto_ptr<int>; 
// 과 비슷함 c++ 98 도입, c++ 11에서 사용 안하기로했고 c++ 17에선 완전히 없앰

template<class T>
class AutoPtr
{
	public:
	T *m_ptr = nullptr;
	
	public:
	AutoPtr(T *ptr = nullptr)
		: m_ptr(ptr)
		{	
		}
	
	~AutoPtr()
	{
		if(m_ptr != nullptr) delete m_ptr;
	}
	
	// auto pointer의 한계를 해결하기 위함
	// copy constructor
	AutoPtr(AutoPtr &a)
	{
		// 소유권을 한명에게만 인정함.
		m_ptr = a.m_ptr;
		a.m_ptr = nullptr;
	}
	
	// copy assignment
	AutoPtr& operator = (AutoPtr &a)
	{
		if (&a == this)
			return *this;
		
		// 소유권 이전
		delete m_ptr;
		m_ptr = a.m_ptr;
		a.m_ptr = nullptr;
		return *this;
	}
	
	T& operator*() const { return *m_ptr; }
	T* operator->() const { return m_ptr; }
	bool isNull() const { return m_ptr == nullptr; }
};
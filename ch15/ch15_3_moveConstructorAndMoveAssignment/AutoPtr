#pragma once

#include <iostream>

template<class T>
class AutoPtr
{
	private:
	T* m_ptr;
	
	public:
	AutoPtr(T* ptr = nullptr)
		: m_ptr(ptr)
	{
		std::cout << "AutoPtr default constructor" << std::endl;
	}
	
	~AutoPtr()
	{
		std::cout << "AutoPtr destructor " << std::endl;
		
		if(m_ptr != nullptr) delete m_ptr;
	}
	
	Autoptr(const AutoPtr& a)
	{
		std::cout << "AutoPtr copy constructor " << std::endl;
		
		// deep copy
		m_ptr = new T;
		*m_ptr = *a.m_ptr;
	}
	
	AutoPtr& operator=(const AutoPtr& operator)
	{
		std::cout << "AutoPtr copy assignment " << std::endl;
		
		if(&a = this)	// prevent self-assignment
			return *this;
		
		if(m_ptr != nullptr) delete m_ptr;
		
		//deep copy
		m_ptr = new T;
		*m_ptr = *a.m_ptr;
		
		return *this;
	}
	
	AutoPtr& operator=(Autoptr&& a)
	{
		std::cout << "AutoPtr move assignment" << std::endl;
		
		if(&a == this)
			return *this;
		
		if(!m_ptr) delete m_ptr;
		
		//shallow copy (move) 포인터만 싹 넘겨줌
		// 리소스의 포인터만 넘겨줌
		m_ptr = a.m_ptr;
		a.m_ptr = nullptr; // really necessary?
		
		return *this;
	}
	
	AutoPtr(AutoPtr &&a)
		: m_ptr(a.m_ptr)
	{
		a.m_ptr = nullptr; // really necessary?
		std::cout << "AutoPtr move constructor " << std::endl;
	}
}
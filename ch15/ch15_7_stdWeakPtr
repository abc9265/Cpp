/*
	순환 의존성 문제(Circular dependency issues) 와 std::weak_ptr
*/

#include <iostream>
#include <memory>
#include <string>


class Person
{
	// shared시 꼬임 
	// weak_pointer는 내용물을 사용을할때 lock을 해줘야함.
	std::string m_name;
	//std::shared_ptr<Person> m_partner;
	std::weak_ptr<Person> m_partner;
	
	public:
	Person(const std::string &name) : m_name(name)
	{
		std::cout << m_name << " created \n";
	}
	
	~Person()
	{
		std::cout << m_name << " destroyed \n";
	}
	
	friend bool partnerUp(std::shared_ptr<Person> &p1, std::shared_ptr<Person> &p2)
	{
		if (!p1 || !p2)
			return false;
		
		p1->m_partner = p2;
		p2->m_partner = p1;
		
		std::cout << p1->m_name << " is partnered with" << p2-> m_name << "\n";
		
		return true;
	}
	
	// weak_pointer는 내용물을 사용을할때 lock을 해줘야함.
	 const std::shared_ptr<Person> getPartner() const
	{
			return m_partner.lock();	
	}

	const std::string & getName() const
	{
		return m_name;
	}
};


using namespace std;

int main()
{
	auto lucy = std::make_shared<Person>("Lucy");
	auto ricky = std::make_shared<Person>("Ricky");
	
	partnerUp(lucy, ricky);
	
	//std::cout << lucy->getPartner()->getName()
	
	
	return 0;
}
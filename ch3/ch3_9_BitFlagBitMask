/*
	Bit flags, Bit masks
	비트연산자가 실전에서 어떻게 사용될 수 있는지를 보여줌.
	array를 컴팩트하게!
	1바이트를 하나만 사용해도 아이템 8개의 상태를 확인할 수 있지 않을까?
	하는 발상 가능
*/

#include <iostream>
#include <bitset>

int main()
{
	using namespace std;
	
	/*
	bool item1_flag = false;
	bool item2_flag = false;
	bool item3_flag = false;
	bool item4_flag = false;
	// ...
	*/
	
	// invokeItems(item1_flag,  ...)와 같이 쓰려면 넘 힘듬 
	// array나 객체를 써도 되지 않나?하지만 결국 이거로 쓰게됨.
	
	// 아이템 8개의 상태를 bool타입 8개가 아닌 
	// unsigned char하나와 옵션으로 깔끔하게 해결하는것
	const unsigned char opt0 = 1 << 0;
	const unsigned char opt1 = 1 << 1;
	const unsigned char opt2 = 1 << 2;
	const unsigned char opt3 = 1 << 3;
	// opt4,5,6,7 ... 
	
	cout << bitset<8>(opt0) << endl;
	cout << bitset<8>(opt1) << endl;
	cout << bitset<8>(opt2) << endl;
	cout << bitset<8>(opt3) << endl;
	
	unsigned char items_flag = 0; 
	cout << "No item " << bitset<8>(items_flag) << endl;
	
	// item0 on
	items_flag |= opt0; 
	cout << "Item0 obtained " << bitset<8>(items_flag) << endl;
	
	// item3 on
	items_flag |= opt3;
	cout << "Item3 obtained " << bitset<8>(items_flag) << endl;
	
	// item3 lost
	items_flag &= ~opt3; // not을 붙여서 넣는다
	cout << "Item3 losted " << bitset<8>(items_flag) << endl;
	
	// has item1?
	if(items_flag & opt1){ cout << "My character has item1" << endl;}
	else { cout << "Not have item1" << endl;}
	// has item0?
	if(items_flag & opt0){ cout << "My character has item0" << endl;}
	else { cout << "Not have item0" << endl;}
	
	// obtain item 2, 3
	items_flag |= (opt2 | opt3);
	cout << "Item2,3 obtained " << bitset<8>(opt2 | opt3) << endl;
	// item이 백개쯤... --> for문 돌리면댐
	
	if ((items_flag & opt2) && !(items_flag & ~opt1))
	{ 
		items_flag ^= opt2;
		items_flag ^= opt1; // 이 두줄을 한줄로 줄일 수도 있음.
	}
	cout << std::bitset<8>(items_flag) << endl;
	
	
	// 컴퓨터 그래픽스 glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	
	
	/*
		BITMASK 
		컬러테이블, 구글에 rgb color table
		뭉뚱그려서 색이 들어올때 3색을 나누고싶다 -> 이때 사용가능 
	*/
	
	const unsigned int red_mask =  0xFF0000; // 플래그는 하나씩 여러개는 마스크
	const unsigned int green_mask = 0x00FF00;
	const unsigned int blue_mask = 0x0000FF;
	
	cout << std::bitset<32>(red_mask) << endl;
	cout << std::bitset<32>(green_mask) << endl;
	cout << std::bitset<32>(blue_mask) << endl;
	
	unsigned int pixel_color = 0xDAA520;
	cout << std::bitset<32>(pixel_color) << endl;
	
	//
	unsigned char blue;
	unsigned char green;
	unsigned char red;
	blue = pixel_color & blue_mask;
	green = (pixel_color & green_mask) >> 8;
	red = (pixel_color & red_mask) >> 16;
	
	cout << "blue: " << bitset<8>(blue) << " " << int(blue) << endl;
	cout << "green: " << bitset<16>(green) << " " << int(green) << endl;
	cout << "red: " << bitset<8>(red) << " " << int(red) << endl;
	// green이 0이 나오는데 char는 뒤의 0 8개밖에 못받기때문 그래서 int로 바꿔서 다시함
	// 근데 추출한건 잘 뽑아오는데 char로도 되게 옮겨줄수는 없을까? -> 시프트 이용
	
	
	
	
	return 0;
}
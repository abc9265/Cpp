/*
	Integer
	2^32개의 변수를 저장할 수 있다. (4바이트 저장)
	맨 앞의 한 부호는 +인지 -인지 확인하는데에 사용함.
	사이즈에 제한이 있고 그 표현하는 범위를 넘어가면 문제가 생긴다.
	Overflow는 컴파일러에서 오류를 잡아주지 않는다.
*/

#include <iostream>
#include <cmath>
#include <limits>

using namespace std;

int main() 
{
	short	s = 1;		// 2byte = 2 * 8 bits = 16bits
	int		i = 1;
	long 	l = 1;
	long long ll = 1;
	
	cout << sizeof(short) << endl;
	cout << sizeof(int) << endl;
	cout << sizeof(long) << endl;
	cout << sizeof(long long) << endl;
	
	cout << std::pow(2, sizeof(short) * 8 - 1) - 1 << endl;	// 제곱하는함수 pow
	cout << std::numeric_limits<short>::max() << endl;
	cout << std::numeric_limits<short>::min() << endl;
	cout << std::numeric_limits<short>::lowest() << endl;
	
	
	s = 32767; 
	s = s + 1; // short의 한도값을 넘겨봄 (32768)
	
	cout << "OverFlow!,  s = " << s << endl;
	
	s = -32768;
	s = s - 1; // short 최소값의 한도를 넘겨봄
	
	cout << "OverFlow!,  s = " << s << endl;
	
	unsigned int k = -1;
	cout << "OverFlow!,  (unsigned) k = " << k << endl; 
	
	// 제대로 계산되려면 앞에 (float를 넣어야한다.)
	cout << "WrongValue, " << 22 / 4 << endl; 
	
	cout << "Be Modified, (float)" << (float)22 / 4 << endl; 
	
	
}
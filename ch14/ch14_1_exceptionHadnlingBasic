/*
 	Exception Handling
*/

#include <iostream>
#include <fstream>
#include <string>
#include <cmath>

using namespace std;

/*
// 잘 기능하는지 체크
// 컴파일타임에 미리 체크? -> assert 
// 그외에는 여러가지 프로그래밍 트릭들.

// 리턴시 나올리가 없는 값을 넣어 오류가 낫다는걸을 알려줌
int findFirstChar(const char * string, char ch)
{
	for (std::size_t index = 0; index < strlen(string); ++index)
		if (string[index] == ch)
			return index;
	
	return -1 // no match
}

// flag역할을 하는 success값을 이용하는 방법
double divide(int x, int y, bool &success)
{
	if ( y == 0 )
	{
		success = false;
		return 0.0;;
	}
}
*/

int main()
{
	/*
	bool success;
	double result = divide(5, 3, success);
	
	if(!success)
		std::cerr << "An error occured" << std::endl;
	else
		std::cout << "Result is " << result << std::endl;
	
	// 변수자체가 초기화가 됬는지 안됬는지를 
	// !오퍼레이터를 이용해 판별하기도한다.
	std::ifstream input_file("temp.txt");
	if(!input_file)
		std::cerr << "Cannot open file" << std::endl;
	*/
	
	// 보기에 깔끔하지 않긴한데 기존의 c++프로그래밍에서는 자주 사용해왔음
	// 1. 퍼포먼스떄문 2. 대안이 마땅치 않았었음
	
	
	// try, throw, catch -> 약간 느려지는 측면이 있어 
	// 퍼포먼스가 굉장히 중요한경우에는 예외처리를 넣지않음
	// 빅데이터 분석을하는데 반드시 파일이 필요한경우 등등에도 사용하면 안됨
	// 예측할 수 없는 경우가 많이 발생하는 경우에 자주쓴다.
	// 인터넷 서버 등등 
	
	// 기초적인 문법 
	// try, catch, throw 
	
	double x;
	cin >> x;
	try
	{
		// auto casting을 해주지않음
		// 타입에 엄격함 타입이 맞지 않는다면 catch에 받아들여지지 않는다.
		if ( x < 0.0) throw std::string("Negative input");
		cout << std::sqrt(x) << endl;
		
		
		// something happend
		// -1.0이라고하면 double로 캐스팅을 안해주기때문에 런타임에러가 뜨게된다.
		throw -1;
	}
	
	catch (int x)
	{
		cout << "Catch integer: " << x << endl;
	}
	
	catch (std::string error_message)
	{
		// do something to respond
		cout << error_message << endl;
	}
	return 0;
}
/*
	예외처리의 위험성과 단점
	1. 메모리 처리가 안되서 메모리 릭이 발생할 수 있다. 
	ex. 
	1.1) try안에서 꽤 큰 메모리를 할당받는다.
	1.2) 예외가 발생해 throw가 발생한다. 
	1.3) delete가 되지않아 메모리 누수가 발생된다.
	--> 스마트포인터를 이용하면 throw할때와 알아서 delete가 되므로 편하다.
	--> memory 인클루드 후 unique_ptr<typename> 이용
	
	2. 소멸자 안에서 throw를 하는건 금기시되는 일이다.
	Re) exception을 못던지게 가정하고 있다.
	
	단점.
	빈번하게 호출되는곳에 
	throw catch를 사용하는건 퍼포먼스가 떨어지기때문에 효율적이지 못하다.
	모든 오류를 예외처리로 잡으려하지말자. 
	오류와 예외는 다름 
	정상적으로 작동해야하는건 if문같은걸로 걸어서 걸러내는게 좋다.
	네트워크 서버 돌릴때, 분산처리, 병렬처리 작업을할때 하드웨어 관련 작업을할때 
	등등일 때 예측할 수 없어서 고장날 때 그런경우에 논리적으로 대책을 마련하기 힘든경우에 
	사용하는게 좋다.
*/

#include <iostream>
#include <memory>

using namespace std;

int main()
{
	int *i = new int[100000];
	unique_ptr<int> up_i(i);	

	
	return 0;
}
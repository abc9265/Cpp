#pragma once
#include <iostream>
#include <assert.h>

template<typename T, unsigned int T_SIZE> // template의 파라미터를 넣을 수 있다.
class MyArray
{
	private:
	//int m_length;
	T *m_data; // T m_data[T_SIZE]
	
	public:
	MyArray()
	{
		m_data = new T[T_SIZE];
	}
	
	~MyArray()
	{
		delete[] m_data;
	}
	
	T & operator[](int index)
	{
		assert(index >= 0 && index < T_SIZE);
		return m_data[index];
	}
	
	int getLength()
	{
		return T_SIZE;
	}
	
	// explicit instantiation을 하려면 
	// template class MyArray<char, 1(23...)> 등등을 전부 넣어야하니 힘들다
	// NON-TYPE 파라미터를 사용할때는 헤더에 집어넣는게 좋음
	void print()
	{
		for (int i = 0; i < T_SIZE; ++i)
			std::cout << m_data[i] << " " ;
		std::cout << std::endl;
	}
};
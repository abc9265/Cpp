/*
 	멤버 함수를 한 번 더 템플릿화하기.
*/

#include <iostream>
#include <typeinfo>

using namespace std;

template<class T>
class A
{
	private:
	T m_value;
	
	public:
	A(const T & input)
		: m_value(input)
		{}
	
	// doSomething에서만 적용이 됨
	// doSomething은 float TT에 대해서 instanciation이 되어있으니 truncation이 된다.
	template<typename TT>
	void doSomething(const TT & input)
	{
		cout << typeid(T).name() << " " << typeid(TT).name() << endl;
		cout << (TT)m_value << endl;
	}
	
	void print()
	{
		cout << m_value << endl;
	}

};
int main()
{
	A<char> a_char('A');
	a_char.print();
	
	// 파라미터로 멤버펑션의 인스턴시에이션을 구분하기위해 타입으로 넣기도 한다.
	// 그러면 문자인데 65로 출력이된다.
	a_char.doSomething(int());
	
	
	return 0;
}
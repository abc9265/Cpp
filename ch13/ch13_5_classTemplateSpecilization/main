/*
 	클래스 템플릿 특수화
*/

#include <iostream>
#include <array>
#include "Storage8.h"
#include <typeinfo>

using namespace std;

template<typename T>
class A
{
	public:
	A(const T& input)
	{}
	
	void doSomething()
	{
		cout << typeid(T).name() << endl;
	}
	
	void test()
	{}
};

template<>
class A<char>
{
	public:
	A(const char & temp)
	{}
	
	void doSomething()
	{
		cout << "Char type specialization" << endl;
	}
};

int main()
{
	// 함수 파라미터에서는 <int> 이부분을 빼도 되지만 
	// 클래스에서는 안됨
	A<int>		a_int(1);
	A<double>	a_double(3.14);
	A<char>	a_char('a');
	
	a_int.test();
	a_double.test();
	// a_char.test(); specialization에서는 구현이 안되있다 이게 상속과의 다른점
	
	a_int.doSomething();
	a_double.doSomething();
	a_char.doSomething();
	
	Storage8<int> intStorage;
	
	for(int count = 0; count < 8; ++count)
		intStorage.set(count, count);
	
	for(int count = 0; count < 8; ++count)
		std::cout << intStorage.get(count) << '\n';
	
	cout << "Sizeof Storage8<int> " << sizeof(Storage8<int>) << endl;
	
	Storage8<bool> boolStorage;
	for(int count = 0; count < 8; ++count)
	{
		
	}
	
	return 0;
} 